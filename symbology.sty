\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{symbology}
  [2016/04/20 v1.0 Construct barcodes]

\RequirePackage{etoolbox}
\RequirePackage{xkeyval}
\AtEndPreamble{\RequirePackage{xcolor}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Check if a value is in range
%
% \sy@check@range{x}{begin}{end} sets the \ifsy@inrange conditional to true if
% begin <= x <= end.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\sy@check@range[3]{%
	\sy@inrangefalse
	\ifnum#1>#3\else
		\ifnum#1<#2\else
			\sy@inrangetrue
		\fi
	\fi
}
\newif\ifsy@inrange

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Options.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\sy@star{*}
\newcommand*\sy@star@or@range[3]{%
	\ifx\sy@star#1\relax
		\sy@inrangetrue
	\else
		\sy@check@range{#1}{#2}{#3}%
	\fi
}

\define@cmdkeys{sy}[sy@]{darkcolor,lightcolor,quietcolor}
\define@boolkey{sy}[sy@]{quietzone}[true]{}
\setkeys{sy}{darkcolor=black,lightcolor=white,quietcolor=white,quietzone=true}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcount\sy@gf@a
\newcount\sy@gf@b
\newcount\sy@gf@r
\newcount\sy@gf@n
\newcount\sy@a
\newcount\sy@b
\newcount\sy@c
\newcount\sy@idx

% Nesting loops without groups. Braces are needed around the body.
% \sy@while\ifnum\a<\b{%
%	body including other loops!
% }\sy@repeat
% Or a do-while loop.
% \sy@while{%
%	body including other loops!
%}\ifnum\a<\b\sy@repeat
\newcount\sy@loop@depth
\let\sy@repeat\fi
\def\sy@while#1#{\sy@whilex{#1}}
\long\def\sy@whilex#1#2#3\sy@repeat{%
	\global\advance\sy@loop@depth\@ne
	\long\csxdef{sy@loop@body@\number\sy@loop@depth}{%
		\unexpanded{#1\relax #2#3\relax}%
		\noexpand\expandafter\expandafter\noexpand
		\csname sy@loop@body@\number\sy@loop@depth\endcsname
		\noexpand\fi
	}%
	\csname sy@loop@body@\number\sy@loop@depth\endcsname
	\global\csundef{sy@loop@body@\number\sy@loop@depth}%
	\global\advance\sy@loop@depth\m@ne
}

\def\sy@for#1=#2to#3by#4#{\sy@forx{#1}{#2}{#3}{#4}}
\long\def\sy@forx#1#2#3#4#5{%
	\global\advance\sy@loop@depth\@ne
	\long\csxdef{sy@loop@body@\number\sy@loop@depth}{%
		\noexpand\ifnum\number\numexpr#3\relax
		\ifnum\numexpr#4\relax>\z@>\else<\fi\noexpand#1%
		\unexpanded{#5}%
		\advance\noexpand#1\number\numexpr#4\relax\relax
		\noexpand\expandafter\expandafter\noexpand
		\csname sy@loop@body@\number\sy@loop@depth\endcsname
		\noexpand\fi
	}%
	#1=\numexpr#2\relax
	\csname sy@loop@body@\number\sy@loop@depth\endcsname
	\global\csundef{sy@loop@body@\number\sy@loop@depth}%
	\global\advance\sy@loop@depth\m@ne
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Global \chardef of a control sequence.
%
% \csgchardef{foo}=5 is the same as \global\chardef\foo=5.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\csgchardef[1]{%
	\expandafter\global\expandafter\chardef\csname#1\endcsname
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Octet arrays.
%
% \sy@make@array\foo{bar@} defines an array accessor \foo such that
% \foo{idx} expands to \bar@idx where idx is expanded as a number using eTeX's
% \numexpr ... \relax construct.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\sy@make@array[2]{%
	\edef#1##1{%
		\noexpand\csname#2\noexpand\number\numexpr##1\relax\endcsname
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Array setter.
%
% \sy@array@global@set\foo{idx}{value}
% \sy@array@set\foo{idx}{value}
% \sy@array@big@set\foo{idx}{value}
% Expands idx and value as numbers using eTeX's \numexpr ... \relax construct
% and then (globally) sets \foo{idx} to value.
% The big variant uses \mathchardef which increases the range of values and
% size of the array.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\sy@array@global@set[3]{%
	\global\expandafter\expandafter\expandafter
	\chardef#1{#2}=\numexpr#3\relax
}
\newcommand*\sy@array@set[3]{%
	\expandafter\expandafter\expandafter
	\chardef#1{#2}=\numexpr#3\relax
}
\newcommand*\sy@array@big@set[3]{%
	\expandafter\expandafter\expandafter
	\mathchardef#1{#2}=\numexpr#3\relax
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Array unsetter.
%
% \sy@array@global@unset\foo{idx}
% Globally undefines \foo{idx}, freeing it from TeX's memory.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\sy@array@global@unset[2]{%
	\global\expandafter\expandafter\expandafter
	\let#1{#2}=\@undefined
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Octet matrices.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\sy@make@matrix[2]{%
	\edef#1##1##2{%
		\noexpand\csname#2\noexpand\number\numexpr##1\relax
		.\noexpand\number\numexpr##2\relax\noexpand\endcsname
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Matrix setter.
%
% \sy@matrix@global@set\foo{row}{col}{value}
% \sy@matrix@set\foo{row}{col}{value}
% Expands row, col, and value as numbers using eTeX's \numexpr ... \relax
% construct and then (globally) sets \foo{row}{col} to value.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\sy@matrix@global@set[4]{%
	\global\expandafter\expandafter\expandafter
	\chardef#1{#2}{#3}=\numexpr#4\relax
}

\newcommand*\sy@matrix@set[4]{%
	\expandafter\expandafter\expandafter
	\chardef#1{#2}{#3}=\numexpr#4\relax
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Matrix unsetter.
%
% \sy@matrix@global@unset\foo{row}{col}
% Globally undefines \foo{row}{col}, freeing it from TeX's memory.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\sy@matrix@global@unset[3]{%
	\global\expandafter\expandafter\expandafter
	\let#1{#2}{#3}=\@undefined
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Polynomial view of an array.
%
% View an array as a deg-degree polynomial.
% E.g., view a[0], a[1], ..., a[deg] as
% a[0]x^{deg} + a[1]x^{deg-1} + ... + a[deg-1]
% \sy@polynomial@view\poly{array}{deg}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\sy@polynomial@view[3]{%
	\edef#1##1{%
		\noexpand\csname#2\noexpand\number\noexpand\numexpr
			\number\numexpr#3\relax-(##1)\relax
		\noexpand\endcsname
	}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parse input.
%
% \sy@parse\msg\continue{msg}
% Store msg in \msg and then execute \continue.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\sy@parse#1#2{%
	\begingroup
	\sy@for\sy@a=\z@ to\@cclvi by\@ne{%
		\catcode\sy@a12
	}%
	\catcode`\\\z@
	\catcode`\{\@ne
	\catcode`\}\tw@
	\catcode`\ 10
	\sy@parsex#1#2%
}

\begingroup
\catcode`\|\z@
\catcode`\(\@ne
\catcode`\)\tw@
\catcode`\{12
\catcode`\}12
\catcode`\\12
|gdef|sy@parsex#1#2(%
	|edef|\(\)%
	|edef|{({)%
	|edef|}(})%
	|aftergroup#2%
	|afterassignment|endgroup%
	|xdef#1%
)
|endgroup

% \sy@make@color@box{box}{width}{height}{overlapwidth}{overlapdepth}{color}
\newcommand*\sy@make@color@box[6]{%
	\setbox#1=\color@hbox
		\color{#6}%
		\vrule\@width\dimexpr#2+#4\relax\@height#3\@depth#5%
	\color@endbox
	\wd#1=#2%
	\dp#1=\z@
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Iterate over the barcode data
%
% Iterate over each token in \sy@msg and expand #1 with \sy@token set to the
% token.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\sy@foreach@token[1]{%
	\def\sy@foreach@v{#1}%
	\expandafter\futurelet\expandafter\sy@token\expandafter\sy@foreach\sy@msg\sy@foreach
}

\def\sy@foreach{%
	\ifx\sy@token\sy@foreach
		\let\sy@gf@next\@gobble
	\else
		\ifx\sy@token\@sptoken
			\let\sy@gf@next\sy@foreach@space
		\else
			\let\sy@gf@next\sy@foreach@nonspace
		\fi
	\fi
	\sy@gf@next
}

\def\sy@foreach@nonspace#1{%
	\def\sy@token{#1}%
	\sy@foreach@v
	\futurelet\sy@token\sy@foreach
}
% Use the \@xifnch trick (see sources2e) to get a space token in the
% definition of \sy@foreach@space as a delimiter.
\begingroup
\def\:{\sy@foreach@space}
\expandafter\gdef\: {%
	\def\sy@token{ }%
	\sy@foreach@v
	\futurelet\sy@token\sy@foreach
}
\endgroup

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Define barcode data.
%
% \barcodedef\code{Barcode data with special characters here}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\barcodedef[1]{%
	\sy@parse#1\relax
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main barcode driver.
%
% \barcode[options]{type}{data}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand*\barcode[2][]{%
	\begingroup
	\edef\sy@type{#2}%
	\def\sy@error##1{\PackageError{symbology}{##1}{}}%
	\ifcsname sy@\sy@type\endcsname
		\setkeys{sy,\sy@type}{#1}%
	\else
		\sy@error{Unknown barcode type `\sy@type'}%
	\fi
	\sy@parse\sy@msg\sy@barcode
}

\def\sy@barcode{%
	\quitvmode
	\csname sy@\sy@type\endcsname
	\global\let\sy@msg\@undefined
	\endgroup
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Divison helpers.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% \sy@mod\result{dividend}{divisor}
% Set \result to dividend % divisor. Overwrites \result before it finishes
% using the dividend and the divisor.
% \def\sy@mod#1#2#3{%
% 	#1=#2%
% 	\divide#1by#3\relax
% 	\multiply#1by-#3\relax
% 	\advance#1by#2\relax
% }

% eTeX's \numexpr ... \relax rounds division! Compensate for that. Both
% \sy@div and \sy@mod require positive integers.
\def\sy@div#1#2{%
	\expandafter\sy@divx\expandafter
	{\number\numexpr#1\expandafter\relax\expandafter}\expandafter
	{\number\numexpr#2\relax}%
}
\def\sy@divx#1#2{%
	\expandafter\sy@divy\expandafter{\number\numexpr#1/#2\relax}{#1}{#2}%
}
\def\sy@divy#1#2#3{%
	\numexpr#1
	\ifnum#2<\numexpr#1*#3\relax
		-\@ne
	\fi
	\relax
}

\def\sy@mod#1#2{%
	\expandafter\sy@modx\expandafter
	{\the\numexpr#1\expandafter\relax\expandafter}\expandafter
	{\the\numexpr#2\relax}%
}
\def\sy@modx#1#2{\numexpr#1-#2*\sy@divx{#1}{#2}\relax}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load the packages.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Linear barcodes.
\RequirePackage{symbology-code11}
\RequirePackage{symbology-code39}
\RequirePackage{symbology-code128}
\RequirePackage{symbology-ean}

% 2D barcodes.
\RequirePackage{symbology-qr}
